/**
 * This file contains all possible replies of bot
 */

let dateFormat = require('dateformat');
const BugStatusEnum = require('./db').BugStatusEnum;

/**
 * Basic greeting variants. When bot added for first time to group this will be shown
 * @param botUsername
 * @returns {string}
 */
const greetings = (botUsername) => {
    let variants = [
        `–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º üëã! –Ø @${botUsername}. 
        
        –Ø –±—É–¥—É –≤–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (daily scrum), —Ç–∞–∫ —á—Ç–æ –≥–ª–∞–¥–∏–º –º–µ–Ω—è –ø–æ –≥–æ–ª–æ–≤–µ üêØ 
        
        –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–±—Ä–∞–≤ /hello —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.

        –°–æ–≤–µ—Ç—É—é –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–µ–±–µ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å @username —á—Ç–æ–±—ã —è –º–æ–≥ —Å –≤–∞–º–∏ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—Ç—å`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * When new user is added to group
 * @param users
 * @returns {string}
 */
const welcome = (users) => {
    let commaUsers = users.map((user) => {
        return (user.username) ? `@${user.username}` : user.first_name;
    }).join(',');

    let variants = [
        `–ü—Ä–∏–≤–µ—Ç ${commaUsers}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É`,

    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * After user sent /hello
 * @param user
 * @returns {string}
 */
const hello = (user) => {
    let name = (user.username) ? `@${user.username}` : user.first_name;
    let variants = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${name}`,
        `–ü—Ä–∏–≤–µ—Ç ${name} üò∏`,
        `–ó–¥–∞—Ä–æ–≤–∞ ${name}`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};


/**
 * This is used to describe that kind command does not exists
 * @param command
 * @returns {string}
 */
const unknownCommand = (command) => {
    let variants = [
        `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ${command}`,
        `–ù–µ–ø–ª–æ—Ö–∞—è –∏–¥–µ—è`,
        `–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ${command} —è –Ω–µ –∑–Ω–∞—é`,
        `–ù–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

const askProvideProjectName = () => {
    return `–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?\n–û—Ç–≤–µ—Ç—å—Ç–µ(Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.`;
};

const askProvideBugShortDescription = () => {
    return `–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ(Reply)!\n\n–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ.`;
};

let getKeyByValue = (object, value) => {
    return Object.keys(object).find(key => object[key] === value);
};

const showBugInfo = (bug) => {
    return `–ë–∞–≥ #${bug.id}
Name: ${bug.short_description}
Status: ${getKeyByValue(BugStatusEnum, bug.status)}
Reported: @${bug.reporter}
Opened date: ${dateFormat(bug.create_date, 'dddd, mmmm dS, yyyy, h:MM:ss TT')}

–û—Ç–≤–µ—Ç—å—Ç–µ(Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;
};

const promptAuthPassword = (passwordHint) => {
  return `–î–ª—è –æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: ${passwordHint}\n–û—Ç–≤–µ—Ç—å—Ç–µ(Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–º –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.`;
};

module.exports.greetings = greetings;
module.exports.welcome = welcome;
module.exports.hello = hello;
module.exports.unknownCommand = unknownCommand;
module.exports.askProvideProjectName = askProvideProjectName;
module.exports.askProvideBugShortDescription = askProvideBugShortDescription;
module.exports.showBugInfo = showBugInfo;
module.exports.promptAuthPassword = promptAuthPassword;