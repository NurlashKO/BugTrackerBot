/**
 * This file contains all possible replies of bot
 */

let dateFormat = require('dateformat');
const BugStatusEnum = require('./db').BugStatusEnum;

const negativeResultMessages = (user) => {
    return [
        `–ü–æ—á–µ–º—É –Ω–µ—Ç @${user.username}? –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∏ —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–¥–∞—á–∞–º, –∏ —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
        `–ù–µ –ø—Ä–∏–¥–µ—à—å? @${user.username} –ø–æ—á–µ–º—É –∏ —á—Ç–æ —Ç—ã —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å –ø–æ –∑–∞–¥–∞—á–∞–º –∏ —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å? –û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É`,
    ];
}


/**
 * Basic greeting variants. When bot added for first time to group this will be shown
 * @param botUsername
 * @returns {string}
 */
const greetings = (botUsername) => {
    let variants = [
        `–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º üëã! –Ø @${botUsername}. 
        
        –Ø –±—É–¥—É –≤–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö (daily scrum), —Ç–∞–∫ —á—Ç–æ –≥–ª–∞–¥–∏–º –º–µ–Ω—è –ø–æ –≥–æ–ª–æ–≤–µ üêØ 
        
        –ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–±—Ä–∞–≤ /hello —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.

        –°–æ–≤–µ—Ç—É—é –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–µ–±–µ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å @username —á—Ç–æ–±—ã —è –º–æ–≥ —Å –≤–∞–º–∏ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—Ç—å`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * When new user is added to group
 * @param users
 * @returns {string}
 */
const welcome = (users) => {
    let commaUsers = users.map((user) => {
        return (user.username) ? `@${user.username}` : user.first_name;
    }).join(',');

    let variants = [
        `–ü—Ä–∏–≤–µ—Ç ${commaUsers}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É`,

    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * After user sent /hello
 * @param user
 * @returns {string}
 */
const hello = (user) => {
    let name = (user.username) ? `@${user.username}` : user.first_name;
    let variants = [
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${name}`,
        `–ü—Ä–∏–≤–µ—Ç ${name} üò∏`,
        `–ó–¥–∞—Ä–æ–≤–∞ ${name}`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};


/**
 * This is used to describe that kind command does not exists
 * @param command
 * @returns {string}
 */
const unknownCommand = (command) => {
    let variants = [
        `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ${command}`,
        `–ù–µ–ø–ª–æ—Ö–∞—è –∏–¥–µ—è`,
        `–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ${command} —è –Ω–µ –∑–Ω–∞—é`,
        `–ù–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * Sometimes scrum could be deleted.
 * @param user
 * @returns {string}
 */
const scrumNotfound = (user) => {
    let variants = [
        `@${user.username} –Ø —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–º–Ω—é, —á—Ç–æ –∑–∞–¥–∞–≤–∞–ª —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å`,
        `–ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ —Ç–æ —É–¥–∞–ª–∏–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –º–æ–µ–π –±–∞–∑—ã @${user.username}`,

    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * When user is answering already answered scrum
 * @param user
 * @returns {string}
 */
const scrumAlreadyAnswered = (user) => {
    let variants = [
        `–ù–∞ —ç—Ç–æ—Ç —Å–∫—Ä–∞–º —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª @${user.username}`,
        `@${user.username} –≠—Ç–æ—Ç —Å–∫—Ä–∞–º —É–∂–µ –∏–º–µ–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * When user is trying to answer to scrum that does not belong to him
 * @param user
 * @returns {string}
 */
const youCannotAnswerToThatScrum = (user) => {
    let variants = [
        `@${user.username}, –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –¥–ª—è –≤–∞—Å`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * This text will be sent to user when user answers to scrum positively
 * @param user
 * @returns {string}
 */
const positiveAnswerResult = (user) => {
    let variants = [
        `–û—Ç–ª–∏—á–Ω–æ ‚ò∫! –ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è @${user.username}`,
        `–≠—Ç–æ —Ö–æ—Ä–æ—à–æ @${user.username}`,
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * These variants will be asked if user answers negatively
 * @param user
 * @returns {string}
 */
const askReasonForNegativeResult = (user) => {
    return negativeResultMessages(user)[Math.floor(Math.random() * negativeResultMessages(user).length)];
};

/**
 * Whether passed {msg} is negative result question for {user}.
 * @param user
 * @returns {boolean}
 */
const isNegativeResultMessage = (msg, user) => {
    return negativeResultMessages(user).indexOf(msg) > -1;
};

/**
 * This is reasking texts
 * @param users
 * @returns {string}
 */
const askReasonForNegativeResultAgain = (users) => {
    let commaUsers = users.map((user) => {
        return (user.username) ? `@${user.username}` : user.first_name;
    }).join(',');

    let variants = [
        `${commaUsers} –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–∏—á–∏–Ω—É —á—Ç–æ –Ω–µ –ø—Ä–∏–¥–µ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù—É –µ—â–µ –ø–æ –∑–∞–¥–∞—á–∞–º —Å–∫—Ä–∞–º–∞ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ`,
        `–Ø –≤—Å–µ –µ—â–µ –∂–¥—É –ø—Ä–∏—á–∏–Ω—ã –ø–æ—á–µ–º—É –≤—ã –Ω–µ –ø—Ä–∏–¥–µ—Ç–µ ${commaUsers}. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—â–µ –ø–æ —Å–∫—Ä–∞–º—É –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –∞ —á—Ç–æ –Ω–µ—Ç`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * This text will be written when user writes reason of rejection
 * @param user
 * @returns {string}
 */
const reasonAccepted = (user) => {
    let variants = [
        `–•–æ—Ä–æ—à–æ @${user.username}, –ø–æ–Ω—è—Ç–Ω–æ`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * When user answers to scrum that already expired
 * @param user
 * @returns {string}
 */
const questionIsOutOfTime = (user) => {
    let variants = [
        `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω @${user.username}`,
        `–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ –Ω–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å @${user.username}`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * Captain Obvious.
 * @param user
 * @returns {string}
 */
const questionNotForThisUser = (user) => {
    let variants = [
        `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –¥–ª—è —Ç–µ–±—è @${user.username}!`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * Captain Obvious
 * @param users
 * @returns {string}
 */
const askUsersForScrum = (users) => {
    let commaUsers = users.map((user) => {
        return (user.username) ? `@${user.username}` : user.first_name;
    }).join(',');

    let variants = [
        `–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å–∫—Ä–∞–º ${commaUsers}, –≤—ã –ø—Ä–∏–¥–µ—Ç–µ?`,
        `–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–∫—Ä–∞–º –ø—Ä–∏–¥–µ—Ç–µ? ${commaUsers}?`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * Captain Obvious
 * @param users
 * @returns {string}
 */
const askUsersForScrumAgain = (users) => {
    let commaUsers = users.map((user) => {
        return (user.username) ? `@${user.username}` : user.first_name;
    }).join(',');

    let variants = [
        `–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å ${commaUsers}. –í—ã –ø—Ä–∏–¥–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–∫—Ä–∞–º?`,
        `–Ø –≤—Å–µ –µ—â–µ –∂–¥—É –æ—Ç–≤–µ—Ç–∞ ${commaUsers}. –ü—Ä–∏–¥–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Å–∫—Ä–∞–º?`,
        `–ù–∞—Ä–æ–¥! –û—Å–æ–±–µ–Ω–Ω–æ –≤–æ—Ç —ç—Ç–∏ ${commaUsers}. –°–∫—Ä–∞–º?`
    ];

    return variants[Math.floor(Math.random() * variants.length)];
};

/**
 * Well.. Congratulations that you have been reading all these obvious docs
 * that are written just for sake of writing docs
 * @returns {string}
 */
const noScrumYet = () => {
    let variants = [
        `–°–µ–≥–æ–¥–Ω—è —è –µ—â–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª –Ω–∞—Å—á–µ—Ç —Å–∫—Ä–∞–º–∞`,
        `–ù–µ –ø–æ–º–Ω—é —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —è —Å–ø—Ä–∞—à–∏–≤–∞–ª –Ω–∞—Ä–æ–¥ –æ —Å–∫—Ä–∞–º–µ`,
        `–ü–æ–∫–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª —Å–µ–≥–æ–¥–Ω—è. –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å`
    ];
    return variants[Math.floor(Math.random() * variants.length)];
};

const askProvideProjectName = () => {
    return `–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?\n–û—Ç–≤–µ—Ç—å—Ç–µ(Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.`;
};

const askProvideBugShortDescription = () => {
    return `–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ(Reply)!\n\n–í –æ—Ç–≤–µ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ.`;
};

let getKeyByValue = (object, value) => {
    return Object.keys(object).find(key => object[key] === value);
};

const showBugInfo = (bug) => {
    return `–ë–∞–≥ #${bug.id}
Name: ${bug.short_description}
Status: ${getKeyByValue(BugStatusEnum, bug.status)}
Reported: @${bug.reporter}
Opened date: ${dateFormat(bug.create_date, 'dddd, mmmm dS, yyyy, h:MM:ss TT')}

–û—Ç–≤–µ—Ç—å—Ç–µ(Reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;
};

module.exports.greetings = greetings;
module.exports.welcome = welcome;
module.exports.hello = hello;
module.exports.unknownCommand = unknownCommand;
module.exports.scrumNotfound = scrumNotfound;
module.exports.scrumAlreadyAnswered = scrumAlreadyAnswered;
module.exports.youCannotAnswerToThatScrum = youCannotAnswerToThatScrum;
module.exports.positiveAnswerResult = positiveAnswerResult;
module.exports.askReasonForNegativeResult = askReasonForNegativeResult;
module.exports.isNegativeResultMessage = isNegativeResultMessage;
module.exports.reasonAccepted = reasonAccepted;
module.exports.questionIsOutOfTime = questionIsOutOfTime;
module.exports.questionNotForThisUser = questionNotForThisUser;
module.exports.askUsersForScrum = askUsersForScrum;
module.exports.askUsersForScrumAgain = askUsersForScrumAgain;
module.exports.askReasonForNegativeResultAgain = askReasonForNegativeResultAgain;
module.exports.noScrumYet = noScrumYet;
module.exports.askProvideProjectName = askProvideProjectName;
module.exports.askProvideBugShortDescription = askProvideBugShortDescription;
module.exports.showBugInfo = showBugInfo;
